

=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\analysis\page.tsx ===
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Heart, ArrowLeft, Star, MapPin, MessageCircle, Play, Users, Factory } from "lucide-react"
import Link from "next/link"
import Image from "next/image"

interface MedicineData {
  name: string
  genericName: string
  description: string
  ingredients: string[]
  manufacturer: string
  dosage: string
  sideEffects: string[]
  precautions: string[]
  youtubeVideoId: string
  reviews: Array<{
    user: string
    rating: number
    comment: string
    date: string
  }>
}

export default function AnalysisPage() {
  const router = useRouter()
  const [capturedImage, setCapturedImage] = useState<string | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(true)
  const [medicineData, setMedicineData] = useState<MedicineData | null>(null)
  const [newReview, setNewReview] = useState({ rating: 5, comment: "" })

  useEffect(() => {
    const imageData = localStorage.getItem("capturedImage")
    if (imageData) {
      setCapturedImage(imageData)
      // Simulate API call for medicine recognition
      setTimeout(() => {
        setMedicineData({
          name: "Paracetamol 500mg",
          genericName: "Acetaminophen",
          description:
            "Paracetamol is a pain reliever and fever reducer. It's used to treat mild to moderate pain and reduce fever.",
          ingredients: ["Paracetamol 500mg", "Microcrystalline Cellulose", "Starch", "Magnesium Stearate"],
          manufacturer: "Generic Pharmaceuticals Ltd.",
          dosage: "Adults: 1-2 tablets every 4-6 hours. Maximum 8 tablets in 24 hours.",
          sideEffects: ["Nausea", "Stomach upset", "Allergic reactions (rare)", "Liver damage (with overdose)"],
          precautions: ["Do not exceed recommended dose", "Avoid alcohol", "Consult doctor if pregnant"],
          youtubeVideoId: "dQw4w9WgXcQ", // Placeholder video ID
          reviews: [
            {
              user: "John D.",
              rating: 5,
              comment: "Very effective for headaches. Works quickly.",
              date: "2024-01-15",
            },
            {
              user: "Sarah M.",
              rating: 4,
              comment: "Good pain relief, but sometimes causes mild stomach upset.",
              date: "2024-01-10",
            },
            {
              user: "Mike R.",
              rating: 5,
              comment: "Reliable and affordable. Always keep it at home.",
              date: "2024-01-05",
            },
          ],
        })
        setIsAnalyzing(false)
      }, 3000)
    } else {
      router.push("/dashboard")
    }
  }, [router])

  const submitReview = () => {
    if (medicineData && newReview.comment.trim()) {
      const updatedReviews = [
        ...medicineData.reviews,
        {
          user: "You",
          rating: newReview.rating,
          comment: newReview.comment,
          date: new Date().toISOString().split("T")[0],
        },
      ]
      setMedicineData({
        ...medicineData,
        reviews: updatedReviews,
      })
      setNewReview({ rating: 5, comment: "" })
    }
  }

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star key={i} className={`h-4 w-4 ${i < rating ? "text-yellow-400 fill-current" : "text-gray-300"}`} />
    ))
  }

  if (!capturedImage) {
    return null
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-md border-b border-blue-100 sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <Button variant="ghost" onClick={() => router.push("/dashboard")}>
              <ArrowLeft className="h-5 w-5 mr-2" />
              Back
            </Button>
            <div className="flex items-center space-x-2">
              <Heart className="h-8 w-8 text-red-500" />
              <h1 className="text-2xl font-bold text-gray-800">Medicine Analysis</h1>
            </div>
          </div>
          <div className="flex space-x-2">
            <Link href="/maps">
              <Button variant="outline" size="sm">
                <MapPin className="h-4 w-4 mr-2" />
                Find Nearby
              </Button>
            </Link>
            <Link href="/chatbot">
              <Button variant="outline" size="sm">
                <MessageCircle className="h-4 w-4 mr-2" />
                Ask AI
              </Button>
            </Link>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {isAnalyzing ? (
          <div className="text-center py-20">
            <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto mb-8"></div>
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Analyzing Your Medicine...</h2>
            <p className="text-gray-600">Please wait while we identify and gather information about your medicine.</p>
          </div>
        ) : (
          <div className="grid lg:grid-cols-3 gap-8">
            {/* Image Section */}
            <div className="lg:col-span-1">
              <Card className="sticky top-24">
                <CardHeader>
                  <CardTitle>Captured Image</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="relative aspect-square rounded-lg overflow-hidden bg-gray-100">
                    <Image
                      src={capturedImage || "/placeholder.svg"}
                      alt="Captured medicine"
                      fill
                      className="object-cover"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Medicine Information */}
            <div className="lg:col-span-2">
              {medicineData && (
                <div className="space-y-6">
                  {/* Basic Info */}
                  <Card>
                    <CardHeader>
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-3xl text-blue-800">{medicineData.name}</CardTitle>
                          <CardDescription className="text-lg mt-2">
                            Generic: {medicineData.genericName}
                          </CardDescription>
                        </div>
                        <Badge variant="secondary" className="bg-green-100 text-green-800">
                          Identified
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-gray-700 leading-relaxed">{medicineData.description}</p>
                    </CardContent>
                  </Card>

                  {/* Detailed Information Tabs */}
                  <Tabs defaultValue="details" className="w-full">
                    <TabsList className="grid w-full grid-cols-4">
                      <TabsTrigger value="details">Details</TabsTrigger>
                      <TabsTrigger value="video">Video</TabsTrigger>
                      <TabsTrigger value="reviews">Reviews</TabsTrigger>
                      <TabsTrigger value="manufacturer">Manufacturer</TabsTrigger>
                    </TabsList>

                    <TabsContent value="details" className="space-y-4">
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center">
                            <Heart className="h-5 w-5 mr-2 text-red-500" />
                            Ingredients
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="flex flex-wrap gap-2">
                            {medicineData.ingredients.map((ingredient, index) => (
                              <Badge key={index} variant="outline">
                                {ingredient}
                              </Badge>
                            ))}
                          </div>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader>
                          <CardTitle>Dosage Instructions</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-gray-700">{medicineData.dosage}</p>
                        </CardContent>
                      </Card>

                      <div className="grid md:grid-cols-2 gap-4">
                        <Card>
                          <CardHeader>
                            <CardTitle className="text-orange-600">Side Effects</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <ul className="space-y-1">
                              {medicineData.sideEffects.map((effect, index) => (
                                <li key={index} className="text-gray-700">
                                  â€¢ {effect}
                                </li>
                              ))}
                            </ul>
                          </CardContent>
                        </Card>

                        <Card>
                          <CardHeader>
                            <CardTitle className="text-blue-600">Precautions</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <ul className="space-y-1">
                              {medicineData.precautions.map((precaution, index) => (
                                <li key={index} className="text-gray-700">
                                  â€¢ {precaution}
                                </li>
                              ))}
                            </ul>
                          </CardContent>
                        </Card>
                      </div>
                    </TabsContent>

                    <TabsContent value="video">
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center">
                            <Play className="h-5 w-5 mr-2 text-red-500" />
                            Educational Video
                          </CardTitle>
                          <CardDescription>Learn more about this medicine from medical professionals</CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="aspect-video bg-gray-100 rounded-lg flex items-center justify-center">
                            <div className="text-center">
                              <Play className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                              <p className="text-gray-600">Video about {medicineData.name}</p>
                              <Button
                                className="mt-4"
                                onClick={() =>
                                  window.open(
                                    `https://www.youtube.com/watch?v=${medicineData.youtubeVideoId}`,
                                    "_blank",
                                  )
                                }
                              >
                                Watch on YouTube
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>

                    <TabsContent value="reviews">
                      <div className="space-y-4">
                        {/* Add Review */}
                        <Card>
                          <CardHeader>
                            <CardTitle>Share Your Experience</CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-4">
                            <div>
                              <label className="block text-sm font-medium mb-2">Rating</label>
                              <div className="flex space-x-1">
                                {[1, 2, 3, 4, 5].map((star) => (
                                  <Star
                                    key={star}
                                    className={`h-6 w-6 cursor-pointer ${
                                      star <= newReview.rating ? "text-yellow-400 fill-current" : "text-gray-300"
                                    }`}
                                    onClick={() => setNewReview({ ...newReview, rating: star })}
                                  />
                                ))}
                              </div>
                            </div>
                            <div>
                              <label className="block text-sm font-medium mb-2">Your Review</label>
                              <textarea
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                rows={3}
                                placeholder="Share your experience with this medicine..."
                                value={newReview.comment}
                                onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}
                              />
                            </div>
                            <Button onClick={submitReview} className="w-full">
                              Submit Review
                            </Button>
                          </CardContent>
                        </Card>

                        {/* Existing Reviews */}
                        <div className="space-y-4">
                          {medicineData.reviews.map((review, index) => (
                            <Card key={index}>
                              <CardContent className="pt-6">
                                <div className="flex justify-between items-start mb-2">
                                  <div className="flex items-center space-x-2">
                                    <Users className="h-4 w-4 text-gray-500" />
                                    <span className="font-medium">{review.user}</span>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <div className="flex">{renderStars(review.rating)}</div>
                                    <span className="text-sm text-gray-500">{review.date}</span>
                                  </div>
                                </div>
                                <p className="text-gray-700">{review.comment}</p>
                              </CardContent>
                            </Card>
                          ))}
                        </div>
                      </div>
                    </TabsContent>

                    <TabsContent value="manufacturer">
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center">
                            <Factory className="h-5 w-5 mr-2 text-blue-500" />
                            Manufacturer Information
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-4">
                            <div>
                              <h4 className="font-medium text-gray-800">Company</h4>
                              <p className="text-gray-600">{medicineData.manufacturer}</p>
                            </div>
                            <div>
                              <h4 className="font-medium text-gray-800">Quality Assurance</h4>
                              <p className="text-gray-600">
                                This medicine is manufactured under strict quality control standards and is approved by
                                regulatory authorities.
                              </p>
                            </div>
                            <div>
                              <h4 className="font-medium text-gray-800">Batch Information</h4>
                              <p className="text-gray-600">
                                Always check the batch number and expiry date on the packaging before use.
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>
                  </Tabs>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\api\chat\route.ts ===
import { GoogleGenerativeAI } from "@google/generative-ai"
import { type NextRequest, NextResponse } from "next/server"

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "AIzaSyDJPJR-gcFymXn7VeWY_8rot-MvssUXOXc")

export async function POST(request: NextRequest) {
  try {
    const { message } = await request.json()

    if (!message) {
      return NextResponse.json({ error: "Message is required" }, { status: 400 })
    }

    // Use the correct model name for the current API
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })

    const prompt = `You are a helpful medical AI assistant. Provide accurate, helpful information about medicines, symptoms, and general health questions. Always remind users to consult healthcare professionals for serious medical concerns. Keep responses concise but informative.

User question: ${message}

Please provide a helpful response:`

    const result = await model.generateContent(prompt)
    const response = await result.response
    const text = response.text()

    return NextResponse.json({ response: text })
  } catch (error) {
    console.error("Error in chat API:", error)

    // Provide a fallback response if API fails
    const fallbackResponse = `I apologize, but I'm having trouble connecting to my AI service right now. Here are some general medical tips:

â€¢ Always read medicine labels carefully
â€¢ Take medications as prescribed by your doctor
â€¢ Store medicines in a cool, dry place
â€¢ Check expiration dates regularly
â€¢ Consult a healthcare professional for any medical concerns

Please try again later or contact a healthcare professional for immediate medical advice.`

    return NextResponse.json({ response: fallbackResponse })
  }
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\api\gemini-places\route.ts ===
[Error reading file]: [Errno 2] No such file or directory: 'C:\\Users\\saisagar\\Downloads\\medical-app (1)\\app\\api\\gemini-places\\route.ts'

=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\api\google-places\route.ts ===
[Error reading file]: [Errno 2] No such file or directory: 'C:\\Users\\saisagar\\Downloads\\medical-app (1)\\app\\api\\google-places\\route.ts'

=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\api\place-details\route.ts ===
[Error reading file]: [Errno 2] No such file or directory: 'C:\\Users\\saisagar\\Downloads\\medical-app (1)\\app\\api\\place-details\\route.ts'

=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\api\places\route.ts ===
[Error reading file]: [Errno 2] No such file or directory: 'C:\\Users\\saisagar\\Downloads\\medical-app (1)\\app\\api\\places\\route.ts'

=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\chatbot\page.tsx ===
"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Heart, ArrowLeft, Send, Bot, User, Loader2 } from "lucide-react"
import { useRouter } from "next/navigation"

interface Message {
  id: string
  content: string
  sender: "user" | "bot"
  timestamp: Date
}

export default function ChatbotPage() {
  const router = useRouter()
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content:
        "Hello! I'm your AI medical assistant. I can help you with questions about medicines, symptoms, and general health information. How can I assist you today?",
      sender: "bot",
      timestamp: new Date(),
    },
  ])
  const [inputMessage, setInputMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    setIsLoading(true)

    try {
      // Call the API route for Gemini AI
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: inputMessage }),
      })

      if (!response.ok) {
        throw new Error("Failed to get response")
      }

      const data = await response.json()

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: data.response,
        sender: "bot",
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, botMessage])
    } catch (error) {
      console.error("Error sending message:", error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content:
          "I apologize, but I'm having trouble connecting right now. Please try again later or consult with a healthcare professional for medical advice.",
        sender: "bot",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const quickQuestions = [
    "What are the side effects of paracetamol?",
    "How should I store my medications?",
    "What should I do if I miss a dose?",
    "Can I take multiple medications together?",
    "When should I see a doctor?",
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-md border-b border-blue-100 sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <Button variant="ghost" onClick={() => router.push("/dashboard")}>
              <ArrowLeft className="h-5 w-5 mr-2" />
              Back
            </Button>
            <div className="flex items-center space-x-2">
              <Heart className="h-8 w-8 text-red-500" />
              <h1 className="text-2xl font-bold text-gray-800">AI Medical Assistant</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <Card className="h-[calc(100vh-200px)] flex flex-col">
          <CardHeader className="border-b">
            <CardTitle className="flex items-center space-x-2">
              <Bot className="h-6 w-6 text-blue-600" />
              <span>Medical AI Assistant</span>
            </CardTitle>
            <p className="text-sm text-gray-600">
              Ask me anything about medicines, symptoms, or general health questions.
              <strong className="text-red-600">
                {" "}
                Always consult a healthcare professional for serious medical concerns.
              </strong>
            </p>
          </CardHeader>

          {/* Messages */}
          <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}>
                <div
                  className={`max-w-[80%] rounded-lg p-4 ${
                    message.sender === "user" ? "bg-blue-600 text-white" : "bg-gray-100 text-gray-800"
                  }`}
                >
                  <div className="flex items-start space-x-2">
                    {message.sender === "bot" && <Bot className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />}
                    {message.sender === "user" && <User className="h-5 w-5 text-white mt-0.5 flex-shrink-0" />}
                    <div className="flex-1">
                      <p className="whitespace-pre-wrap">{message.content}</p>
                      <p className={`text-xs mt-2 ${message.sender === "user" ? "text-blue-100" : "text-gray-500"}`}>
                        {message.timestamp.toLocaleTimeString()}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 rounded-lg p-4 max-w-[80%]">
                  <div className="flex items-center space-x-2">
                    <Bot className="h-5 w-5 text-blue-600" />
                    <Loader2 className="h-4 w-4 animate-spin text-blue-600" />
                    <span className="text-gray-600">Thinking...</span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </CardContent>

          {/* Quick Questions */}
          {messages.length === 1 && (
            <div className="px-4 pb-4">
              <p className="text-sm text-gray-600 mb-2">Quick questions to get started:</p>
              <div className="flex flex-wrap gap-2">
                {quickQuestions.map((question, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => setInputMessage(question)}
                    className="text-xs"
                  >
                    {question}
                  </Button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="border-t p-4">
            <div className="flex space-x-2">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Ask me about medicines, symptoms, or health questions..."
                className="flex-1"
                disabled={isLoading}
              />
              <Button onClick={sendMessage} disabled={!inputMessage.trim() || isLoading} className="px-6">
                {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
              </Button>
            </div>
            <p className="text-xs text-gray-500 mt-2">
              Press Enter to send. This AI provides general information only - always consult healthcare professionals
              for medical advice.
            </p>
          </div>
        </Card>
      </div>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\contact\page.tsx ===
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Heart, ArrowLeft, Mail, Phone, MapPin, Send, CheckCircle } from "lucide-react"
import { useRouter } from "next/navigation"

export default function ContactPage() {
  const router = useRouter()
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    subject: "",
    message: "",
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault()
  setIsSubmitting(true)

  try {
    const response = await fetch("https://api.web3forms.com/submit", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        access_key: "272f573d-8800-4283-9282-687a388e6bff",
        name: formData.name,
        email: formData.email,
        subject: formData.subject,
        message: formData.message,
        from_name: "MediCare AI Contact Form",
        replyto: formData.email // âœ… This is required to get replies delivered correctly
      }),
    })

    const responseText = await response.text()
    console.log("Web3Forms response:", responseText) // âœ… Debugging help

    if (response.ok) {
      setIsSubmitted(true)
      setFormData({ name: "", email: "", subject: "", message: "" })
    } else {
      throw new Error("Failed to submit form")
    }
  } catch (error) {
    console.error("Error submitting form:", error)
    alert("There was an error submitting your message. Please try again.")
  } finally {
    setIsSubmitting(false)
  }
}

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-md border-b border-blue-100 sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <Button variant="ghost" onClick={() => router.push("/dashboard")}>
              <ArrowLeft className="h-5 w-5 mr-2" />
              Back
            </Button>
            <div className="flex items-center space-x-2">
              <Heart className="h-8 w-8 text-red-500" />
              <h1 className="text-2xl font-bold text-gray-800">Contact Us</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold text-gray-800 mb-4">Get in Touch</h2>
            <p className="text-xl text-gray-600">
              Have questions or need support? We're here to help you with your medical app experience.
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-12">
            {/* Contact Information */}
            <div className="space-y-8">
              <Card className="bg-gradient-to-br from-blue-500 to-blue-600 text-white">
                <CardHeader>
                  <CardTitle className="text-2xl">Contact Information</CardTitle>
                  <CardDescription className="text-blue-100">
                    Reach out to us through any of these channels
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="flex items-center space-x-4">
                    <div className="bg-white/20 p-3 rounded-full">
                      <Mail className="h-6 w-6" />
                    </div>
                    <div>
                      <h4 className="font-semibold">Email</h4>
                      <p className="text-blue-100">support@medicareai.com</p>
                    </div>
                  </div>

                  <div className="flex items-center space-x-4">
                    <div className="bg-white/20 p-3 rounded-full">
                      <Phone className="h-6 w-6" />
                    </div>
                    <div>
                      <h4 className="font-semibold">Phone</h4>
                      <p className="text-blue-100">+1 (555) 123-MEDI</p>
                    </div>
                  </div>

                  <div className="flex items-center space-x-4">
                    <div className="bg-white/20 p-3 rounded-full">
                      <MapPin className="h-6 w-6" />
                    </div>
                    <div>
                      <h4 className="font-semibold">Address</h4>
                      <p className="text-blue-100">
                        123 Healthcare Avenue
                        <br />
                        Medical District, MD 12345
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Frequently Asked Questions</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-2">How accurate is the medicine recognition?</h4>
                    <p className="text-gray-600 text-sm">
                      Our AI has high accuracy but should not replace professional medical advice.
                    </p>
                  </div>
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-2">Is my data secure?</h4>
                    <p className="text-gray-600 text-sm">
                      Yes, we use enterprise-grade security to protect your medical information.
                    </p>
                  </div>
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-2">Can I use this app offline?</h4>
                    <p className="text-gray-600 text-sm">
                      Some features require internet connection for the most up-to-date information.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Contact Form */}
            <div>
              <Card>
                <CardHeader>
                  <CardTitle>Send us a Message</CardTitle>
                  <CardDescription>
                    Fill out the form below and we'll get back to you as soon as possible
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {isSubmitted ? (
                    <div className="text-center py-8">
                      <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
                      <h3 className="text-2xl font-bold text-gray-800 mb-2">Message Sent!</h3>
                      <p className="text-gray-600 mb-6">
                        Thank you for contacting us. We'll get back to you within 24 hours.
                      </p>
                      <Button onClick={() => setIsSubmitted(false)}>Send Another Message</Button>
                    </div>
                  ) : (
                    <form onSubmit={handleSubmit} className="space-y-6">
                      <div className="grid md:grid-cols-2 gap-4">
                        <div>
                          <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                            Full Name *
                          </label>
                          <Input
                            id="name"
                            name="name"
                            type="text"
                            required
                            value={formData.name}
                            onChange={handleInputChange}
                            placeholder="Your full name"
                          />
                        </div>
                        <div>
                          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                            Email Address *
                          </label>
                          <Input
                            id="email"
                            name="email"
                            type="email"
                            required
                            value={formData.email}
                            onChange={handleInputChange}
                            placeholder="your.email@example.com"
                          />
                        </div>
                      </div>

                      <div>
                        <label htmlFor="subject" className="block text-sm font-medium text-gray-700 mb-2">
                          Subject *
                        </label>
                        <Input
                          id="subject"
                          name="subject"
                          type="text"
                          required
                          value={formData.subject}
                          onChange={handleInputChange}
                          placeholder="What is this regarding?"
                        />
                      </div>

                      <div>
                        <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-2">
                          Message *
                        </label>
                        <Textarea
                          id="message"
                          name="message"
                          required
                          rows={6}
                          value={formData.message}
                          onChange={handleInputChange}
                          placeholder="Please describe your issue or question in detail..."
                        />
                      </div>

                      <Button
                        type="submit"
                        disabled={isSubmitting}
                        className="w-full bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700"
                      >
                        {isSubmitting ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                            Sending...
                          </>
                        ) : (
                          <>
                            <Send className="h-4 w-4 mr-2" />
                            Send Message
                          </>
                        )}
                      </Button>
                    </form>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\dashboard\page.tsx ===
"use client"

import type React from "react"

import { useAuth, SignOutButton } from "@clerk/nextjs"
import { useRouter } from "next/navigation"
import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Camera, Upload, Heart, User, MapPin, MessageCircle, LogOut, Pill, Building2 } from "lucide-react"
import Link from "next/link"

export default function Dashboard() {
  const { isSignedIn, user } = useAuth()
  const router = useRouter()
  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null)
  const [showCamera, setShowCamera] = useState(false)
  const [capturedImage, setCapturedImage] = useState<string | null>(null)
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    if (!isSignedIn) {
      router.push("/")
    }
  }, [isSignedIn, router])

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: "environment" },
      })
      setCameraStream(stream)
      setShowCamera(true)
      if (videoRef.current) {
        videoRef.current.srcObject = stream
      }
    } catch (error) {
      console.error("Error accessing camera:", error)
      alert("Unable to access camera. Please check permissions and try again.")
    }
  }

  const stopCamera = () => {
    if (cameraStream) {
      cameraStream.getTracks().forEach((track) => track.stop())
      setCameraStream(null)
    }
    setShowCamera(false)
  }

  const capturePhoto = () => {
    if (videoRef.current && canvasRef.current) {
      const canvas = canvasRef.current
      const video = videoRef.current
      const context = canvas.getContext("2d")

      canvas.width = video.videoWidth
      canvas.height = video.videoHeight

      if (context) {
        context.drawImage(video, 0, 0)
        const imageData = canvas.toDataURL("image/jpeg")
        setCapturedImage(imageData)
        stopCamera()

        // Store image and navigate to analysis
        localStorage.setItem("capturedImage", imageData)
        router.push("/analysis")
      }
    }
  }

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        const imageData = e.target?.result as string
        localStorage.setItem("capturedImage", imageData)
        router.push("/analysis")
      }
      reader.readAsDataURL(file)
    }
  }

  if (!isSignedIn) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-green-50">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Header */}
      <header className="bg-white/90 backdrop-blur-md border-b border-blue-100 sticky top-0 z-50 shadow-sm">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-3">
            <div className="relative">
              <Heart className="h-8 w-8 text-red-500" />
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full pulse-ring"></div>
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-800">MediCare AI</h1>
              <p className="text-sm text-gray-500">Your Medical Assistant</p>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2 bg-blue-50 px-3 py-2 rounded-full">
              <User className="h-4 w-4 text-blue-600" />
              <span className="text-sm font-medium text-blue-800">
                Hello, {user?.firstName || user?.emailAddresses[0]?.emailAddress?.split("@")[0] || "User"}!
              </span>
            </div>
            <SignOutButton>
              <Button variant="outline" size="sm" className="hover:bg-red-50 hover:text-red-600 bg-transparent">
                <LogOut className="h-4 w-4 mr-2" />
                Sign Out
              </Button>
            </SignOutButton>
          </div>
        </div>
      </header>

      {/* Camera Modal */}
      {showCamera && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl p-6 max-w-md w-full mx-4 shadow-2xl animate-fade-in">
            <h3 className="text-xl font-bold mb-4 text-center text-gray-800">Capture Medicine Photo</h3>
            <div className="relative mb-4">
              <video ref={videoRef} autoPlay playsInline className="w-full rounded-lg shadow-lg" />
              <canvas ref={canvasRef} className="hidden" />
              <div className="absolute inset-0 border-2 border-dashed border-white/50 rounded-lg pointer-events-none"></div>
            </div>
            <div className="flex justify-center space-x-4">
              <Button
                onClick={capturePhoto}
                className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-full hover:scale-105 transition-all duration-300"
              >
                <Camera className="h-4 w-4 mr-2" />
                Capture
              </Button>
              <Button
                onClick={stopCamera}
                variant="outline"
                className="px-6 py-2 rounded-full bg-transparent hover:scale-105 transition-all duration-300"
              >
                Cancel
              </Button>
            </div>
          </div>
        </div>
      )}

      <div className="container mx-auto px-4 py-8">
        {/* Welcome Section */}
        <div className="text-center mb-12 animate-fade-in">
          <h2 className="text-4xl font-bold text-gray-800 mb-4">
            Welcome to Your <span className="text-blue-600">Medical Dashboard</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Take a photo or upload an image of your medicine to get instant detailed information, find nearby
            pharmacies, or chat with our AI assistant.
          </p>
        </div>

        {/* Main Action Cards */}
        <div className="grid md:grid-cols-2 gap-8 mb-12">
          <Card
            className="group hover:shadow-2xl transition-all duration-700 hover:-translate-y-6 hover:rotate-2 bg-gradient-to-br from-blue-500 to-blue-600 text-white cursor-pointer overflow-hidden relative transform-gpu"
            onClick={startCamera}
          >
            <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16 group-hover:scale-150 transition-transform duration-700"></div>
            <div className="absolute inset-0 bg-gradient-to-br from-transparent to-black/20 group-hover:from-white/5 transition-all duration-500"></div>
            <CardHeader className="text-center relative z-10 p-8">
              <div className="mx-auto mb-6 p-6 bg-white/20 rounded-full w-fit group-hover:scale-125 group-hover:rotate-12 transition-all duration-500 shadow-2xl">
                <Camera className="h-12 w-12 group-hover:scale-110 transition-transform duration-300" />
              </div>
              <CardTitle className="text-3xl mb-3 group-hover:scale-105 transition-transform duration-300">
                Take Photo
              </CardTitle>
              <CardDescription className="text-blue-100 text-lg leading-relaxed group-hover:text-white transition-colors duration-300">
                Use your camera to capture medicine image for instant AI-powered analysis
              </CardDescription>
              <div className="mt-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                <div className="flex items-center justify-center text-sm">
                  <div className="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                  Click to activate camera
                </div>
              </div>
            </CardHeader>
          </Card>

          <Card
            className="group hover:shadow-2xl transition-all duration-700 hover:-translate-y-6 hover:-rotate-2 bg-gradient-to-br from-green-500 to-green-600 text-white cursor-pointer overflow-hidden relative transform-gpu"
            onClick={() => fileInputRef.current?.click()}
          >
            <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16 group-hover:scale-150 transition-transform duration-700"></div>
            <div className="absolute inset-0 bg-gradient-to-br from-transparent to-black/20 group-hover:from-white/5 transition-all duration-500"></div>
            <CardHeader className="text-center relative z-10 p-8">
              <div className="mx-auto mb-6 p-6 bg-white/20 rounded-full w-fit group-hover:scale-125 group-hover:-rotate-12 transition-all duration-500 shadow-2xl">
                <Upload className="h-12 w-12 group-hover:scale-110 transition-transform duration-300" />
              </div>
              <CardTitle className="text-3xl mb-3 group-hover:scale-105 transition-transform duration-300">
                Upload Image
              </CardTitle>
              <CardDescription className="text-green-100 text-lg leading-relaxed group-hover:text-white transition-colors duration-300">
                Select an existing image from your device gallery for analysis
              </CardDescription>
              <div className="mt-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                <div className="flex items-center justify-center text-sm">
                  <div className="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                  Click to browse files
                </div>
              </div>
            </CardHeader>
          </Card>
        </div>

        <input ref={fileInputRef} type="file" accept="image/*" onChange={handleFileUpload} className="hidden" />

        {/* Quick Access Features */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <Link href="/maps" className="group">
            <Card className="hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:rotate-1 cursor-pointer bg-white/90 backdrop-blur-sm border-2 border-transparent hover:border-red-200 transform-gpu">
              <CardHeader className="text-center p-6">
                <div className="mx-auto mb-4 p-4 bg-gradient-to-br from-red-500 to-red-600 rounded-2xl w-fit group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 shadow-lg">
                  <MapPin className="h-8 w-8 text-white group-hover:scale-110 transition-transform duration-300" />
                </div>
                <CardTitle className="text-lg group-hover:text-red-600 transition-colors duration-300 group-hover:scale-105 transform">
                  Find Nearby
                </CardTitle>
                <CardDescription className="group-hover:text-gray-700 transition-colors duration-300">
                  Locate pharmacies and hospitals around you
                </CardDescription>
                <div className="mt-3 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                  <div className="text-xs text-red-500 font-medium">â†’ Explore locations</div>
                </div>
              </CardHeader>
            </Card>
          </Link>

          <Link href="/chatbot" className="group">
            <Card className="hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:-rotate-1 cursor-pointer bg-white/90 backdrop-blur-sm border-2 border-transparent hover:border-purple-200 transform-gpu">
              <CardHeader className="text-center p-6">
                <div className="mx-auto mb-4 p-4 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl w-fit group-hover:scale-110 group-hover:-rotate-12 transition-all duration-500 shadow-lg">
                  <MessageCircle className="h-8 w-8 text-white group-hover:scale-110 transition-transform duration-300" />
                </div>
                <CardTitle className="text-lg group-hover:text-purple-600 transition-colors duration-300 group-hover:scale-105 transform">
                  AI Assistant
                </CardTitle>
                <CardDescription className="group-hover:text-gray-700 transition-colors duration-300">
                  Chat with our medical AI for instant help
                </CardDescription>
                <div className="mt-3 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                  <div className="text-xs text-purple-500 font-medium">â†’ Start chatting</div>
                </div>
              </CardHeader>
            </Card>
          </Link>

          <Link href="/contact" className="group">
            <Card className="hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:rotate-1 cursor-pointer bg-white/90 backdrop-blur-sm border-2 border-transparent hover:border-pink-200 transform-gpu">
              <CardHeader className="text-center p-6">
                <div className="mx-auto mb-4 p-4 bg-gradient-to-br from-pink-500 to-pink-600 rounded-2xl w-fit group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 shadow-lg">
                  <Heart className="h-8 w-8 text-white group-hover:scale-110 transition-transform duration-300" />
                </div>
                <CardTitle className="text-lg group-hover:text-pink-600 transition-colors duration-300 group-hover:scale-105 transform">
                  Contact Support
                </CardTitle>
                <CardDescription className="group-hover:text-gray-700 transition-colors duration-300">
                  Get help and support from our team
                </CardDescription>
                <div className="mt-3 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                  <div className="text-xs text-pink-500 font-medium">â†’ Get support</div>
                </div>
              </CardHeader>
            </Card>
          </Link>
        </div>

        {/* Stats Section */}
        <div className="grid md:grid-cols-4 gap-4 mb-8">
          <Card className="bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:scale-105 transition-transform duration-300">
            <CardContent className="p-4 text-center">
              <Pill className="h-8 w-8 mx-auto mb-2" />
              <div className="text-2xl font-bold">10K+</div>
              <div className="text-sm text-blue-100">Medicines Identified</div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-green-500 to-green-600 text-white hover:scale-105 transition-transform duration-300">
            <CardContent className="p-4 text-center">
              <Building2 className="h-8 w-8 mx-auto mb-2" />
              <div className="text-2xl font-bold">500+</div>
              <div className="text-sm text-green-100">Partner Pharmacies</div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-purple-500 to-purple-600 text-white hover:scale-105 transition-transform duration-300">
            <CardContent className="p-4 text-center">
              <MessageCircle className="h-8 w-8 mx-auto mb-2" />
              <div className="text-2xl font-bold">24/7</div>
              <div className="text-sm text-purple-100">AI Support</div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-red-500 to-red-600 text-white hover:scale-105 transition-transform duration-300">
            <CardContent className="p-4 text-center">
              <Heart className="h-8 w-8 mx-auto mb-2" />
              <div className="text-2xl font-bold">99%</div>
              <div className="text-sm text-red-100">User Satisfaction</div>
            </CardContent>
          </Card>
        </div>

        {/* Instructions */}
        <Card className="bg-gradient-to-r from-gray-50 to-gray-100 border-dashed border-2 border-gray-300 hover:shadow-lg transition-shadow duration-300">
          <CardContent className="p-6 text-center">
            <h3 className="text-lg font-semibold text-gray-800 mb-2">How to Get Started</h3>
            <p className="text-gray-600 mb-4">
              Simply take a photo or upload an image of any medicine to get detailed information including ingredients,
              dosage, side effects, and more!
            </p>
            <div className="flex justify-center space-x-4 text-sm text-gray-500">
              <div className="flex items-center group hover:text-blue-600 transition-colors duration-300">
                <div className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs mr-2 group-hover:scale-110 transition-transform duration-300">
                  1
                </div>
                Capture/Upload
              </div>
              <div className="flex items-center group hover:text-green-600 transition-colors duration-300">
                <div className="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-xs mr-2 group-hover:scale-110 transition-transform duration-300">
                  2
                </div>
                AI Analysis
              </div>
              <div className="flex items-center group hover:text-purple-600 transition-colors duration-300">
                <div className="w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs mr-2 group-hover:scale-110 transition-transform duration-300">
                  3
                </div>
                Get Results
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\maps\page.tsx ===
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Heart, ArrowLeft, MapPin, Phone, Clock, Navigation, Building2, Pill } from "lucide-react"
import { useRouter } from "next/navigation"

interface Location {
  id: string
  name: string
  type: "pharmacy" | "hospital"
  address: string
  phone: string
  distance: string
  rating: number
  isOpen: boolean
  hours: string
  emergency?: boolean
}

export default function MapsPage() {
  const router = useRouter()
  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | null>(null)
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedType, setSelectedType] = useState<"all" | "pharmacy" | "hospital">("all")
  const [locations, setLocations] = useState<Location[]>([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // Get user location
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setUserLocation({
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          })
          loadNearbyLocations()
        },
        (error) => {
          console.error("Error getting location:", error)
          loadNearbyLocations() // Load with default locations
        },
      )
    } else {
      loadNearbyLocations()
    }
  }, [])

  const loadNearbyLocations = () => {
    // Simulate API call to get nearby pharmacies and hospitals
    setTimeout(() => {
      setLocations([
        {
          id: "1",
          name: "City Medical Pharmacy",
          type: "pharmacy",
          address: "123 Main Street, Downtown",
          phone: "+1 (555) 123-4567",
          distance: "0.3 km",
          rating: 4.5,
          isOpen: true,
          hours: "8:00 AM - 10:00 PM",
        },
        {
          id: "2",
          name: "General Hospital",
          type: "hospital",
          address: "456 Health Avenue, Medical District",
          phone: "+1 (555) 987-6543",
          distance: "0.8 km",
          rating: 4.2,
          isOpen: true,
          hours: "24/7",
          emergency: true,
        },
        {
          id: "3",
          name: "QuickCare Pharmacy",
          type: "pharmacy",
          address: "789 Oak Street, Suburb",
          phone: "+1 (555) 456-7890",
          distance: "1.2 km",
          rating: 4.7,
          isOpen: true,
          hours: "9:00 AM - 9:00 PM",
        },
        {
          id: "4",
          name: "Emergency Medical Center",
          type: "hospital",
          address: "321 Emergency Lane, Central",
          phone: "+1 (555) 111-2222",
          distance: "1.5 km",
          rating: 4.0,
          isOpen: true,
          hours: "24/7",
          emergency: true,
        },
        {
          id: "5",
          name: "Wellness Pharmacy",
          type: "pharmacy",
          address: "654 Wellness Road, East Side",
          phone: "+1 (555) 333-4444",
          distance: "2.1 km",
          rating: 4.3,
          isOpen: false,
          hours: "8:00 AM - 8:00 PM",
        },
        {
          id: "6",
          name: "Regional Medical Hospital",
          type: "hospital",
          address: "987 Medical Plaza, North District",
          phone: "+1 (555) 777-8888",
          distance: "2.8 km",
          rating: 4.6,
          isOpen: true,
          hours: "24/7",
          emergency: true,
        },
      ])
      setIsLoading(false)
    }, 1500)
  }

  const filteredLocations = locations.filter((location) => {
    const matchesType = selectedType === "all" || location.type === selectedType
    const matchesSearch =
      location.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      location.address.toLowerCase().includes(searchQuery.toLowerCase())
    return matchesType && matchesSearch
  })

  const openInMaps = (address: string) => {
    const encodedAddress = encodeURIComponent(address)
    window.open(`https://www.google.com/maps/search/${encodedAddress}`, "_blank")
  }

  const callLocation = (phone: string) => {
    window.open(`tel:${phone}`)
  }

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <span key={i} className={`text-sm ${i < Math.floor(rating) ? "text-yellow-400" : "text-gray-300"}`}>
        â˜…
      </span>
    ))
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-md border-b border-blue-100 sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              onClick={() => router.push("/dashboard")}
              className="hover:scale-105 transition-transform duration-300"
            >
              <ArrowLeft className="h-5 w-5 mr-2" />
              Back
            </Button>
            <div className="flex items-center space-x-2">
              <Heart className="h-8 w-8 text-red-500" />
              <h1 className="text-2xl font-bold text-gray-800">Find Nearby</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Search and Filters */}
        <div className="mb-8 space-y-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <Input
                placeholder="Search for pharmacies or hospitals..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full focus:ring-2 focus:ring-blue-500 transition-all duration-300"
              />
            </div>
            <div className="flex gap-2">
              <Button
                variant={selectedType === "all" ? "default" : "outline"}
                onClick={() => setSelectedType("all")}
                className="hover:scale-105 transition-transform duration-300"
              >
                All
              </Button>
              <Button
                variant={selectedType === "pharmacy" ? "default" : "outline"}
                onClick={() => setSelectedType("pharmacy")}
                className="hover:scale-105 transition-transform duration-300"
              >
                <Pill className="h-4 w-4 mr-2" />
                Pharmacies
              </Button>
              <Button
                variant={selectedType === "hospital" ? "default" : "outline"}
                onClick={() => setSelectedType("hospital")}
                className="hover:scale-105 transition-transform duration-300"
              >
                <Building2 className="h-4 w-4 mr-2" />
                Hospitals
              </Button>
            </div>
          </div>
        </div>

        {/* Map Placeholder */}
        <Card className="mb-8 hover:shadow-lg transition-shadow duration-300">
          <CardContent className="p-0">
            <div className="h-64 bg-gradient-to-br from-blue-100 to-green-100 rounded-lg flex items-center justify-center">
              <div className="text-center">
                <MapPin className="h-16 w-16 text-blue-600 mx-auto mb-4 animate-bounce" />
                <h3 className="text-xl font-semibold text-gray-800 mb-2">Interactive Map</h3>
                <p className="text-gray-600">Map showing nearby pharmacies and hospitals</p>
                <p className="text-sm text-gray-500 mt-2">
                  {userLocation
                    ? `Your location: ${userLocation.lat.toFixed(4)}, ${userLocation.lng.toFixed(4)}`
                    : "Location access not available"}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        {isLoading ? (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Finding nearby locations...</p>
          </div>
        ) : (
          <div className="space-y-4">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Nearby Locations ({filteredLocations.length})</h2>

            {filteredLocations.map((location) => (
              <Card key={location.id} className="hover:shadow-xl transition-all duration-500 hover:-translate-y-2">
                <CardContent className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex items-start space-x-4">
                      <div
                        className={`p-3 rounded-full ${location.type === "pharmacy" ? "bg-green-100" : "bg-red-100"} hover:scale-110 transition-transform duration-300`}
                      >
                        {location.type === "pharmacy" ? (
                          <Pill
                            className={`h-6 w-6 ${location.type === "pharmacy" ? "text-green-600" : "text-red-600"}`}
                          />
                        ) : (
                          <Building2 className="h-6 w-6 text-red-600" />
                        )}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-1">
                          <h3 className="text-xl font-semibold text-gray-800 hover:text-blue-600 transition-colors duration-300">
                            {location.name}
                          </h3>
                          {location.emergency && (
                            <Badge variant="destructive" className="text-xs animate-pulse">
                              Emergency
                            </Badge>
                          )}
                          <Badge variant={location.isOpen ? "default" : "secondary"} className="text-xs">
                            {location.isOpen ? "Open" : "Closed"}
                          </Badge>
                        </div>
                        <div className="flex items-center space-x-1 mb-2">
                          {renderStars(location.rating)}
                          <span className="text-sm text-gray-600 ml-2">({location.rating})</span>
                        </div>
                        <p className="text-gray-600 mb-1">{location.address}</p>
                        <div className="flex items-center space-x-4 text-sm text-gray-500">
                          <div className="flex items-center hover:text-blue-600 transition-colors duration-300">
                            <Clock className="h-4 w-4 mr-1" />
                            {location.hours}
                          </div>
                          <div className="flex items-center hover:text-green-600 transition-colors duration-300">
                            <Navigation className="h-4 w-4 mr-1" />
                            {location.distance}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="flex space-x-2">
                    <Button
                      onClick={() => openInMaps(location.address)}
                      className="flex-1 hover:scale-105 transition-transform duration-300"
                    >
                      <MapPin className="h-4 w-4 mr-2" />
                      Directions
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => callLocation(location.phone)}
                      className="flex-1 hover:scale-105 transition-transform duration-300"
                    >
                      <Phone className="h-4 w-4 mr-2" />
                      Call
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\sign-in\[[...sign-in]]\page.tsx ===
import { SignIn } from "@clerk/nextjs"

export default function SignInPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-green-50 p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8 animate-fade-in">
          <div className="flex items-center justify-center space-x-2 mb-4">
            <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
              <span className="text-white font-bold text-xl">M</span>
            </div>
            <h1 className="text-3xl font-bold text-gray-800">MediCare AI</h1>
          </div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Welcome Back</h2>
          <p className="text-gray-600">Sign in to access your medical assistant</p>
        </div>

        <div className="bg-white rounded-2xl shadow-2xl p-8 border border-gray-100">
          <SignIn
            appearance={{
              elements: {
                rootBox: "w-full",
                card: "shadow-none border-0 bg-transparent",
                headerTitle: "hidden",
                headerSubtitle: "hidden",
                socialButtonsBlockButton: "bg-gray-50 border border-gray-200 hover:bg-gray-100 text-gray-700",
                formButtonPrimary:
                  "bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white",
                footerActionLink: "text-blue-500 hover:text-blue-600",
                identityPreviewEditButton: "text-blue-500 hover:text-blue-600",
                formFieldInput: "border-gray-200 focus:border-blue-500 focus:ring-blue-500",
                dividerLine: "bg-gray-200",
                dividerText: "text-gray-500",
              },
            }}
            redirectUrl="/dashboard"
            signUpUrl="/sign-up"
          />
        </div>

        <div className="text-center mt-6">
          <p className="text-sm text-gray-500">
            Don't have an account?{" "}
            <a href="/sign-up" className="text-blue-500 hover:text-blue-600 font-medium">
              Sign up for free
            </a>
          </p>
        </div>
      </div>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\sign-up\[[...sign-up]]\page.tsx ===
import { SignUp } from "@clerk/nextjs"

export default function SignUpPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-green-50 p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8 animate-fade-in">
          <div className="flex items-center justify-center space-x-2 mb-4">
            <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
              <span className="text-white font-bold text-xl">M</span>
            </div>
            <h1 className="text-3xl font-bold text-gray-800">MediCare AI</h1>
          </div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Join MediCare</h2>
          <p className="text-gray-600">Create your account to get started with AI-powered medical assistance</p>
        </div>

        <div className="bg-white rounded-2xl shadow-2xl p-8 border border-gray-100">
          <SignUp
            appearance={{
              elements: {
                rootBox: "w-full",
                card: "shadow-none border-0 bg-transparent",
                headerTitle: "hidden",
                headerSubtitle: "hidden",
                socialButtonsBlockButton: "bg-gray-50 border border-gray-200 hover:bg-gray-100 text-gray-700",
                formButtonPrimary:
                  "bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white",
                footerActionLink: "text-blue-500 hover:text-blue-600",
                identityPreviewEditButton: "text-blue-500 hover:text-blue-600",
                formFieldInput: "border-gray-200 focus:border-blue-500 focus:ring-blue-500",
                dividerLine: "bg-gray-200",
                dividerText: "text-gray-500",
              },
            }}
            redirectUrl="/dashboard"
            signInUrl="/sign-in"
          />
        </div>

        <div className="text-center mt-6">
          <p className="text-sm text-gray-500">
            Already have an account?{" "}
            <a href="/sign-in" className="text-blue-500 hover:text-blue-600 font-medium">
              Sign in here
            </a>
          </p>
        </div>
      </div>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.75rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  /* Enhanced Animations */
  .animate-fade-in {
    animation: fadeIn 1s ease-in-out;
  }

  .animate-fade-in-up {
    animation: fadeInUp 1s ease-out;
  }

  .animate-slide-up {
    animation: slideUp 0.8s ease-out;
  }

  .animate-bounce-gentle {
    animation: bounceGentle 2s infinite;
  }

  .animate-blob {
    animation: blob 7s infinite;
  }

  .animate-gradient {
    animation: gradient 3s ease infinite;
    background-size: 200% 200%;
  }

  .animation-delay-2000 {
    animation-delay: 2s;
  }

  .animation-delay-4000 {
    animation-delay: 4s;
  }

  .pulse-ring {
    animation: pulse-ring 1.25s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;
  }

  .hover-lift {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .hover-lift:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  .medical-gradient {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }

  .glass-effect {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
}

/* Keyframe Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(40px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes bounceGentle {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-10px);
  }
  60% {
    transform: translateY(-5px);
  }
}

@keyframes blob {
  0% {
    transform: translate(0px, 0px) scale(1);
  }
  33% {
    transform: translate(30px, -50px) scale(1.1);
  }
  66% {
    transform: translate(-20px, 20px) scale(0.9);
  }
  100% {
    transform: translate(0px, 0px) scale(1);
  }
}

@keyframes gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

@keyframes pulse-ring {
  0% {
    transform: scale(0.33);
  }
  40%,
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: scale(1.2);
  }
}

/* Hover Effects */
.card-hover {
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.card-hover:hover {
  transform: translateY(-12px) rotate(2deg) scale(1.05);
  box-shadow: 0 32px 64px -12px rgba(0, 0, 0, 0.35);
}

.button-hover {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.button-hover:hover {
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.3);
}

/* Responsive Design */
@media (max-width: 768px) {
  .animate-fade-in-up {
    animation-duration: 0.8s;
  }

  .card-hover:hover {
    transform: translateY(-8px) scale(1.02);
  }
}

/* Loading States */
.loading-shimmer {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* Focus States */
.focus-ring {
  @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;
}

/* Custom Scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\layout.tsx ===
import type React from "react"
import "./globals.css"
import { ClerkProvider } from "@clerk/nextjs"
import { Inter } from "next/font/google"

const inter = Inter({ subsets: ["latin"] })

export const metadata = {
  title: "MediCare - Medical Assistant App",
  description: "AI-powered medical assistance application",
    generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body className={inter.className}>
          <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">{children}</div>
        </body>
      </html>
    </ClerkProvider>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\app\page.tsx ===
"use client"

import { useAuth } from "@clerk/nextjs"
import { useRouter } from "next/navigation"
import { useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Heart, Camera, MapPin, MessageCircle, Shield, Zap, ArrowRight, Sparkles } from "lucide-react"
import { LoadingSpinner } from "@/components/loading"

export default function HomePage() {
  const { isSignedIn, isLoaded } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (isLoaded && isSignedIn) {
      router.push("/dashboard")
    }
  }, [isSignedIn, isLoaded, router])

  const handleSignIn = () => {
    router.push("/sign-in")
  }

  const handleSignUp = () => {
    router.push("/sign-up")
  }

  // Show loading while Clerk is initializing
  if (!isLoaded) {
    return <LoadingSpinner />
  }

  // If user is signed in, show loading while redirecting
  if (isSignedIn) {
    return <LoadingSpinner />
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Header */}
      <header className="border-b bg-white/90 backdrop-blur-md sticky top-0 z-50 shadow-sm">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-3 group">
            <div className="relative">
              <Heart className="h-8 w-8 text-red-500 group-hover:scale-110 transition-transform duration-300" />
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
            </div>
            <div>
              <span className="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors duration-300">
                MediCare AI
              </span>
              <div className="text-xs text-gray-500">Your Health Assistant</div>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <Button
              variant="ghost"
              onClick={handleSignIn}
              className="hover:bg-blue-50 hover:text-blue-600 transition-all duration-300 hover:scale-105"
            >
              Sign In
            </Button>
            <Button
              onClick={handleSignUp}
              className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 hover:-translate-y-1"
            >
              Get Started
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="py-20 px-4 relative overflow-hidden">
        {/* Background Animation */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-200 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob"></div>
          <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-purple-200 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000"></div>
          <div className="absolute top-40 left-40 w-80 h-80 bg-pink-200 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000"></div>
        </div>

        <div className="container mx-auto text-center relative z-10">
          <div className="animate-fade-in-up">
            <div className="inline-flex items-center bg-blue-50 text-blue-600 px-4 py-2 rounded-full text-sm font-medium mb-6 hover:bg-blue-100 transition-colors duration-300">
              <Sparkles className="h-4 w-4 mr-2" />
              AI-Powered Medical Assistant
            </div>
            <h1 className="text-6xl font-bold text-gray-800 mb-6 leading-tight">
              Your Smart
              <span className="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 animate-gradient">
                {" "}
                Medical{" "}
              </span>
              Companion
            </h1>
            <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed">
              Identify medicines instantly, get detailed information, find nearby pharmacies, and chat with our AI
              assistant - all powered by advanced artificial intelligence.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
              <Button
                size="lg"
                onClick={handleSignUp}
                className="text-lg px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-110 hover:-translate-y-2 group"
              >
                Start Your Health Journey
                <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform duration-300" />
              </Button>
              <Button
                variant="outline"
                size="lg"
                onClick={handleSignIn}
                className="text-lg px-8 py-4 border-2 hover:bg-gray-50 transition-all duration-300 hover:scale-105 hover:shadow-lg bg-transparent"
              >
                Sign In
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 px-4 bg-white/50 backdrop-blur-sm">
        <div className="container mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-800 mb-4">Powerful Medical Features</h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Everything you need for smart healthcare management in one place
            </p>
          </div>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            <Card className="group hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:rotate-1 bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader className="text-center p-8">
                <div className="mx-auto mb-6 p-4 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl w-fit group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 shadow-lg">
                  <Camera className="h-8 w-8 text-white" />
                </div>
                <CardTitle className="text-xl mb-3 group-hover:text-blue-600 transition-colors duration-300">
                  Medicine Recognition
                </CardTitle>
                <CardDescription className="text-base leading-relaxed">
                  Take a photo or upload an image to identify medicines instantly with 99% accuracy
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:-rotate-1 bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader className="text-center p-8">
                <div className="mx-auto mb-6 p-4 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl w-fit group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 shadow-lg">
                  <Shield className="h-8 w-8 text-white" />
                </div>
                <CardTitle className="text-xl mb-3 group-hover:text-green-600 transition-colors duration-300">
                  Detailed Information
                </CardTitle>
                <CardDescription className="text-base leading-relaxed">
                  Get comprehensive details about medicines, ingredients, dosage, and side effects
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:rotate-1 bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader className="text-center p-8">
                <div className="mx-auto mb-6 p-4 bg-gradient-to-br from-red-500 to-red-600 rounded-2xl w-fit group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 shadow-lg">
                  <MapPin className="h-8 w-8 text-white" />
                </div>
                <CardTitle className="text-xl mb-3 group-hover:text-red-600 transition-colors duration-300">
                  Find Nearby Stores
                </CardTitle>
                <CardDescription className="text-base leading-relaxed">
                  Locate pharmacies and hospitals near your location with real-time availability
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:-rotate-1 bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader className="text-center p-8">
                <div className="mx-auto mb-6 p-4 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl w-fit group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 shadow-lg">
                  <MessageCircle className="h-8 w-8 text-white" />
                </div>
                <CardTitle className="text-xl mb-3 group-hover:text-purple-600 transition-colors duration-300">
                  AI Chat Assistant
                </CardTitle>
                <CardDescription className="text-base leading-relaxed">
                  Get instant answers to your medical questions from our advanced AI assistant
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:rotate-1 bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader className="text-center p-8">
                <div className="mx-auto mb-6 p-4 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-2xl w-fit group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 shadow-lg">
                  <Zap className="h-8 w-8 text-white" />
                </div>
                <CardTitle className="text-xl mb-3 group-hover:text-yellow-600 transition-colors duration-300">
                  Fast & Accurate
                </CardTitle>
                <CardDescription className="text-base leading-relaxed">
                  Powered by advanced AI for lightning-fast and highly reliable results
                </CardDescription>
              </CardHeader>
            </Card>

            <Card className="group hover:shadow-2xl transition-all duration-500 hover:-translate-y-4 hover:-rotate-1 bg-white/80 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader className="text-center p-8">
                <div className="mx-auto mb-6 p-4 bg-gradient-to-br from-pink-500 to-rose-500 rounded-2xl w-fit group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 shadow-lg">
                  <Heart className="h-8 w-8 text-white" />
                </div>
                <CardTitle className="text-xl mb-3 group-hover:text-pink-600 transition-colors duration-300">
                  User Reviews
                </CardTitle>
                <CardDescription className="text-base leading-relaxed">
                  Read and share experiences about medicines with our trusted community
                </CardDescription>
              </CardHeader>
            </Card>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 px-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white relative overflow-hidden">
        <div className="absolute inset-0 bg-black/10"></div>
        <div className="container mx-auto text-center relative z-10">
          <h2 className="text-4xl font-bold mb-6">Ready to Transform Your Healthcare?</h2>
          <p className="text-xl mb-8 opacity-90 max-w-2xl mx-auto">
            Join thousands of users who trust MediCare AI for their medical needs
          </p>
          <Button
            size="lg"
            onClick={handleSignUp}
            className="text-lg px-8 py-4 bg-white text-blue-600 hover:bg-gray-100 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-110 hover:-translate-y-2"
          >
            Get Started Free
            <ArrowRight className="ml-2 h-5 w-5" />
          </Button>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12 px-4">
        <div className="container mx-auto text-center">
          <div className="flex items-center justify-center space-x-3 mb-6 group">
            <Heart className="h-8 w-8 text-red-500 group-hover:scale-110 transition-transform duration-300" />
            <span className="text-2xl font-bold">MediCare AI</span>
          </div>
          <p className="text-gray-400 mb-4">
            Your trusted AI-powered medical assistant. Always consult healthcare professionals for medical advice.
          </p>
          <div className="flex justify-center space-x-6 text-sm text-gray-400">
            <a href="#" className="hover:text-white transition-colors duration-300">
              Privacy Policy
            </a>
            <a href="#" className="hover:text-white transition-colors duration-300">
              Terms of Service
            </a>
            <a href="#" className="hover:text-white transition-colors duration-300">
              Contact Us
            </a>
          </div>
        </div>
      </footer>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\components\interactive-map.tsx ===
[Error reading file]: [Errno 2] No such file or directory: 'C:\\Users\\saisagar\\Downloads\\medical-app (1)\\components\\interactive-map.tsx'

=== File: C:\Users\saisagar\Downloads\medical-app (1)\components\loading.tsx ===
import { Heart } from "lucide-react"

export function LoadingSpinner() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex items-center justify-center">
      <div className="text-center">
        <div className="relative mb-8">
          <div className="animate-spin rounded-full h-32 w-32 border-b-4 border-blue-600 mx-auto"></div>
          <Heart className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-8 w-8 text-red-500 animate-pulse" />
        </div>
        <h2 className="text-2xl font-bold text-gray-800 mb-2">MediCare AI</h2>
        <p className="text-gray-600">Loading your medical assistant...</p>
        <div className="flex justify-center space-x-1 mt-4">
          <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
          <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
          <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
        </div>
      </div>
    </div>
  )
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\components\theme-provider.tsx ===
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\hooks\use-mobile.tsx ===
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\hooks\use-toast.ts ===
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


=== File: C:\Users\saisagar\Downloads\medical-app (1)\lib\utils.ts ===
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


=== File: C:\Users\saisagar\Downloads\medical-app (1)\middleware.ts ===
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";
import type { NextRequest } from "next/server";

const isProtectedRoute = createRouteMatcher([
  "/dashboard(.*)",
  "/analysis(.*)",
  "/maps(.*)",
  "/chatbot(.*)",
  "/contact(.*)",
]);

export default clerkMiddleware((auth, req: NextRequest) => {
  if (isProtectedRoute(req)) {
    return auth().then((session) => {
      if (!session.userId) {
        return new Response("Unauthorized", { status: 401 });
      }
    });
  }
});

export const config = {
  matcher: ["/((?!.*\\..*|_next).*)", "/", "/(api|trpc)(.*)"],
};


=== File: C:\Users\saisagar\Downloads\medical-app (1)\package.json ===
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.24.0",
    "@google/generative-ai": "^0.24.1",
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "autoprefixer": "^10.4.21",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.6.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.525.0",
    "next": "^15.3.4",
    "next-themes": "^0.4.6",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.60.0",
    "react-resizable-panels": "^3.0.3",
    "recharts": "^3.0.0",
    "sonner": "^2.0.6",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.2",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@types/node": "^24.0.12",
    "@types/react": "^18.3.23",
    "@types/react-dom": "^18.3.7",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.3"
  }
}

=== File: C:\Users\saisagar\Downloads\medical-app (1)\tailwind.config.ts ===
import type { Config } from "tailwindcss";

// all in fixtures is set to tailwind v3 as interims solutions

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;


=== File: C:\Users\saisagar\Downloads\medical-app (1)\tsconfig.json ===
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
